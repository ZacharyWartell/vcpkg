#!/bin/bash
# @author Zachary Wartell
# @brief a hack script
#
# TODO
#
# - [someday-maybe] port to python
#
# RESOURCES:
# - https://man7.org/linux/man-pages/man1/getopts.1p.html 
# - https://medium.com/@Drew_Stokes/bash-argument-parsing-54f3b81a6a8f

VCPKG_ROOT=/c/vcpkg
LIBRARY=vrpn
SRC_DIR=0d99f50601-340a543fbb
SRC_PATH="$VCPKG_ROOT/buildtrees/$LIBRARY/src/$SRC_DIR"

enable_dry_run ()
{
    alias git='echo git'
}

git ()
{
    if [ $dry_run ]; then
        echo git $*
    else
        git $*
    fi

}

init_repo ()
{
    check=`git remote -v`
    if [ "$check" = "" ]; then
        # Create temp git repo for facilitating generation of git diff patches
        pushd $SRC_PATH
        git init
        git add *
        git commit -m '-vcpkg-helper:  temp git repo for facilitating generation of git diff patches'
        popd
    fi
}


#
# Run git diff on all modified files CMakelist.txt
#
generate_patches ()
{
    echo generate_patches
    pushd $SRC_PATH > /dev/null        
	FILES=`git status | gawk '/.*modified:.*CMakeLists\.txt/  { print $2 }'`
    for FILE in $FILES; do
        echo $FILE
        PATCH_FILE=`basename $FILE`.patch
        pushd `dirname $FILE` > /dev/null     
            git diff `basename $FILE` > $PATCH_FILE 2> /dev/null        
            if [ $debug -gt 0 ]; then
                echo In `pwd` generated:            
                ls $PATCH_FILE
                if [ $debug -gt 1 ]; then
                    cat $PATCH_FILE
                fi
                echo -------------------------
            fi                        
        popd > /dev/null        
    done	
    popd > /dev/null
}

dry_run=
debug=0

PARAMS=""
while (( "$#" )); do
    case "$1" in
        --debug)            
            if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                debug=$2
                shift 2
            else
                debug=1                
                shift
            fi                        
            ;;    
        --dry-run)
            dry_run=1            
            echo DRY_RUN
            alias git='echo git'
            alias
            shift
            ;;
        --generate-patches)
            generate_patches
            exit 0
            ;;
        --init-repo)
            init_repo
            exit 0
            ;;            
        -*|--*=) # unsupported flags
            echo "Error: Unsupported flag $1" >&2
            exit 1
            ;;
        *) # preserve positional arguments
            PARAMS="$PARAMS $1"
            shift
            ;;
    esac
done
# set positional arguments in their proper place
eval set -- "$PARAMS"
