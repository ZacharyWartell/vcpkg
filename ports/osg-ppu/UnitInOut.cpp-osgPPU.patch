diff --git a/src/osgPPU/UnitInOut.cpp b/src/osgPPU/UnitInOut.cpp
index 62a324d..649f48e 100644
--- a/src/osgPPU/UnitInOut.cpp
+++ b/src/osgPPU/UnitInOut.cpp
@@ -42,8 +42,9 @@ namespace osgPPU
             void load (const osg::Texture2DArray &texture, osg::State &state) const
             {
                 // do only anything if such textures are supported
-                osg::Texture2DArray::Extensions* ext = osg::Texture2DArray::getExtensions(state.getContextID(), true);
-                if (ext && ext->isTexture2DArraySupported())
+                //osg::Texture2DArray::Extensions* ext = osg::Texture2DArray::getExtensions(state.getContextID(), true);
+                osg::GLExtensions* ext = state.get<osg::GLExtensions>();
+                if (ext && ext->isTexture2DArraySupported)
                 {
                     // create temporary image which is initialized with 0 values
                     osg::ref_ptr<osg::Image> img = new osg::Image();
@@ -58,7 +59,7 @@ namespace osgPPU
                     memset(img->data(), 0, img->getTotalSizeInBytesIncludingMipmaps() * sizeof(unsigned char));
 
                     // create the texture in usual OpenGL way
-                    ext->glTexImage3D( GL_TEXTURE_2D_ARRAY_EXT, 0, texture.getInternalFormat(),
+                    ext->glTexImage3D( GL_TEXTURE_2D_ARRAY, 0, texture.getInternalFormat(),
                         texture.getTextureWidth(), texture.getTextureHeight(), texture.getTextureDepth(),
                         texture.getBorderWidth(), texture.getSourceFormat() ? texture.getSourceFormat() : texture.getInternalFormat(),
                         texture.getSourceType() ? texture.getSourceType() : GL_UNSIGNED_BYTE,
@@ -83,8 +84,9 @@ namespace osgPPU
             void load (const osg::Texture3D &texture, osg::State &state) const
             {
                 // do only anything if such textures are supported
-                osg::Texture3D::Extensions* ext = osg::Texture3D::getExtensions(state.getContextID(), true);
-                if (ext && ext->isTexture3DSupported())
+                //osg::Texture3D::Extensions* ext = osg::Texture3D::getExtensions(state.getContextID(), true);
+                osg::GLExtensions* ext = state.get<osg::GLExtensions>();
+                if (ext && ext->isTexture3DSupported)
                 {
                     // create temporary image which is initialized with 0 values
                     osg::ref_ptr<osg::Image> img = new osg::Image();
